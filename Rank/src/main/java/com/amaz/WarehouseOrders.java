package com.amaz;

import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Deque;
import java.util.List;

/**
 * –ó–∞–¥–∞—á–∞ - Warehouse.
 * Warehouse –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–∫–∞–∑—ã –∫–ª–∏–µ–Ω—Ç–æ–≤, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –≤ –≤–∏–¥–µ –º–∞—Å—Å–∏–≤–∞ orderProcessTime[i],
 * –≥–¥–µ i ‚Äî –∏–Ω–¥–µ–∫—Å –∑–∞–∫–∞–∑–∞.
 * –ó–∞–∫–∞–∑—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ, –∑–∞–≤–µ—Ä—à–∏–≤ –æ–¥–∏–Ω, –ø–µ—Ä–µ—Ö–æ–¥—è—Ç –∫ —Å–ª–µ–¥—É—é—â–µ–º—É.
 * Amazon —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–æ —Å–º–µ–Ω–∞–º, –≥–¥–µ –∫–∞–∂–¥–∞—è —Å–º–µ–Ω–∞ –∏–º–µ–µ—Ç —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—É—é –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å shiftDuration[i].
 * –ï—Å–ª–∏ –∑–∞–∫–∞–∑ –Ω–µ —É—Å–ø–µ–≤–∞—é—Ç –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞ —Å–º–µ–Ω—É, –æ–Ω –ø–µ—Ä–µ–Ω–æ—Å–∏—Ç—Å—è –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é —Å–º–µ–Ω—É.
 * –ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤ –≤ —Ç–µ–∫—É—â–µ–π —Å–º–µ–Ω–µ –ø—Ä–æ—Ü–µ—Å—Å –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –∑–∞–Ω–æ–≤–æ —Å –ø–µ—Ä–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–π —Å–º–µ–Ω–µ.
 * –í–∞—à–∞ –∑–∞–¥–∞—á–∞ ‚Äî –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –æ—Å—Ç–∞—Ç–æ–∫ –≤—Ä–µ–º–µ–Ω–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–∫–∞–∑–æ–≤ –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–π —Å–º–µ–Ω—ã.
 * <p>
 * üîπ –†–∞–∑–±–æ—Ä –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
 * <p>
 * n = 5 ‚Üí –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤
 * orderProcessTime = [2, 4, 5, 1, 1] ‚Üí –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–∞–∂–¥–æ–≥–æ –∑–∞–∫–∞–∑–∞
 * m = 5 ‚Üí –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–º–µ–Ω
 * shiftDuration = [1, 5, 1, 5, 2] ‚Üí –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫–∞–∂–¥–æ–π —Å–º–µ–Ω—ã
 */

public class WarehouseOrders {

    public static void main(String[] args) {
        List<Integer> orders = List.of(2, 4, 5, 1, 1);
        List<Integer> shiftsDuration = List.of(1, 5, 1, 5, 2);
        calculatePendingOrders(orders, shiftsDuration).forEach(System.out::println);
    }

    public static List<Integer> calculatePendingOrders(List<Integer> orderProcessTime, List<Integer> shiftDuration) {
        List<Integer> result = new ArrayList<>();
        Deque<Integer> ordersQ = new ArrayDeque<>(orderProcessTime);
        for (int i = 0; i < shiftDuration.size(); i++) {
            if (ordersQ.isEmpty()) {
                break;
            }
            int nextOrderTime = ordersQ.poll();
            int nextShiftTime = shiftDuration.get(i);
            while (nextShiftTime - nextOrderTime >= 0) {
                nextShiftTime -= nextOrderTime;
                if (!ordersQ.isEmpty()) {
                    nextOrderTime = ordersQ.poll();
                }
            }
            int remainOrderTime = nextOrderTime - nextShiftTime;
            // –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è –∑–∞–∫–∞–∑–∞ –≤ –æ—á–µ—Ä–µ–¥—å —Å –≥–æ–ª–æ–≤—ã
            if (remainOrderTime > 0) {
                ordersQ.addFirst(remainOrderTime);
            }
            result.add(ordersQ.size());
        }
        return result;
    }

    public static List<Integer> calculatePendingOrdersImproved(List<Integer> orderProcessTime, List<Integer> shiftDuration) {
        List<Integer> result = new ArrayList<>();
        Deque<Integer> ordersQ = new ArrayDeque<>(orderProcessTime);
        for (int shiftTime : shiftDuration) {
            if (ordersQ.isEmpty()) {
                break;
            }
            int nextOrderTime = ordersQ.poll();
            while (shiftTime > 0 && nextOrderTime <= shiftTime) {
                shiftTime -= nextOrderTime;
                if (!ordersQ.isEmpty()) {
                    nextOrderTime = ordersQ.poll();
                } else {
                    nextOrderTime = 0; // –í—Å–µ –∑–∞–∫–∞–∑—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã
                }
            }
            // –ï—Å–ª–∏ –æ—Å—Ç–∞–ª—Å—è –Ω–µ–¥–æ—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –∑–∞–∫–∞–∑, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ
            if (nextOrderTime > shiftTime && nextOrderTime > 0) {
                ordersQ.addFirst(nextOrderTime - shiftTime);
            }
            result.add(ordersQ.size());
        }
        return result;
    }

}
