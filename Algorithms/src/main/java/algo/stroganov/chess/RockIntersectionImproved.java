package algo.stroganov.chess;

/**
 * –≠—Ç–æ—Ç –ø–æ–¥—Ö–æ–¥ –∏–º–µ–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—É—é —Å–ª–æ–∂–Ω–æ—Å—Ç—åùëÇ(ùëò+ùëÅ)
 * O(k+N), –≥–¥–µ k ‚Äî –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∞–¥–µ–π, –∞ N ‚Äî —Ä–∞–∑–º–µ—Ä –¥–æ—Å–∫–∏,
 * —á—Ç–æ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–µ–µ –¥–ª—è –±–æ–ª—å—à–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π k.
 */

public class RockIntersectionImproved {

    public int rookIntersections(int chessDeskSize, int[][] rooksCoordinates) {
        if (chessDeskSize <= 0 || rooksCoordinates == null) {
            throw new IllegalArgumentException("Invalid input data");
        }

        int[] rows = new int[chessDeskSize];
        int[] cols = new int[chessDeskSize];

        // –ü–æ–¥—Å—á—ë—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ª–∞–¥–µ–π –≤ –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–µ –∏ —Å—Ç–æ–ª–±—Ü–µ
        for (int[] coord : rooksCoordinates) { //–∏–¥–µ–º –ø–æ —Å—Ç—Ä–æ–∫–∞–º
            int row = coord[0] - 1; // –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∫ –∏–Ω–¥–µ–∫—Å—É –º–∞—Å—Å–∏–≤–∞
            int col = coord[1] - 1; // –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∫ –∏–Ω–¥–µ–∫—Å—É –º–∞—Å—Å–∏–≤–∞
            rows[row]++; //—Å–∫–æ–ª—å x —Å—Ç–æ–∏—Ç –≤ —Ç–æ–º–µ –∂–µ —Ä—è–¥—É
            cols[col]++; // —Å–∫–æ–ª—å–∫–æ y –≤ —Ç–æ–º –∂–µ —Ä—è–¥—É
        }

        int result = 0;

        // –ü–æ–¥—Å—á—ë—Ç –ø–∞—Ä –ª–∞–¥–µ–π, –∞—Ç–∞–∫—É—é—â–∏—Ö –¥—Ä—É–≥ –¥—Ä—É–≥–∞ –≤ —Å—Ç—Ä–æ–∫–∞—Ö
        for (int count : rows) { // —Å—á–∏—Ç–∞–µ–º —Å–æ—á–µ—Ç–∞–Ω–∏–µ 2 –ª—é–±—ã—Ö –ª–∞–¥–µ–π –≤ —Ä—è–¥—É –∏ –Ω–∞—Ä–∞—â–∏–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if (count > 1) {
                result += count * (count - 1) / 2;
            }
        }

        // –ü–æ–¥—Å—á—ë—Ç –ø–∞—Ä –ª–∞–¥–µ–π, –∞—Ç–∞–∫—É—é—â–∏—Ö –¥—Ä—É–≥ –¥—Ä—É–≥–∞ –≤ —Å—Ç–æ–ª–±—Ü–∞—Ö
        for (int count : cols) {
            if (count > 1) {
                result += count * (count - 1) / 2;
            }
        }

        return result;
    }

}
