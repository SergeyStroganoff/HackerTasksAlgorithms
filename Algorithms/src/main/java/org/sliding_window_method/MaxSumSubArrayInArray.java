package org.sliding_window_method;

/**
 * –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–¥–º–∞—Å—Å–∏–≤–∞ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
 * –ó–∞–¥–∞—á–∞: –ù–∞–π—Ç–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Å—É–º–º—É –ø–æ–¥–º–∞—Å—Å–∏–≤–∞ –¥–ª–∏–Ω—ã ùëò
 */
public class MaxSumSubArrayInArray {
    public static void main(String[] args) {
        int[] nums = {1, 3, 2, 5, 7, 2, 4, 1};
        int k = 3;
        System.out.println("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–¥ –º–∞—Å—Å–∏–≤–∞ –¥–ª–∏–Ω—ã " + k + ": " + maxSumImproved(nums, k)); // –í—ã–≤–æ–¥: 14
    }


    /**
     * Solution O(n_2)
     */
    private static String maxSum(int[] nums, int k) {
        if (nums.length == 0) {
            return String.valueOf(0);
        }
        if (nums.length == 1) {
            return String.valueOf(1);
        }
        int max = 0;
        for (int i = 0; i < nums.length - 1 - k; i++) {
            int localSum = 0;
            for (int n = 0; n < k; n++) {
                localSum += nums[i + n];
            }
            max = Math.max(localSum, max);
        }
        return String.valueOf(max);
    }


    /**
     * Solution O(n)
     */
    public static int maxSumImproved(int[] nums, int k) {
        int maxSum = 0;
        int windowSum = 0;
        // –°–Ω–∞—á–∞–ª–∞ –≤—ã—á–∏—Å–ª—è–µ–º —Å—É–º–º—É –ø–µ—Ä–≤–æ–≥–æ –æ–∫–Ω–∞ - –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–ª–∏ –æ–∫–Ω–æ
        for (int i = 0; i < k; i++) {
            windowSum += nums[i];
        }
        maxSum = windowSum;
        // –î–≤–∏–≥–∞–µ–º –æ–∫–Ω–æ –≤–ø—Ä–∞–≤–æ
        for (int i = k; i < nums.length; i++) {
            // –ü—Ä–∏–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ —á–∏—Å–ª–∞ –≤–æ—à–µ–¥—à–µ–µ –≤ –æ–∫–Ω–æ —Å–ø—Ä–∞–≤–∞
            // –∏ –≤—ã—á–∏—Ç–∞–µ–º –∏–∑ —Å—É–º–º—ã —á–∏—Å–ª–æ —Å–ª–µ–≤–∞, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã—à–ª–æ –∏–∑ –∑–æ–Ω—ã –æ–∫–Ω–∞
            // —Ç–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º –Ω–µ –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Å—é —Å—É–º–º—É, –∞ –¥–µ–ª–∞–µ–º —Ç–æ–ª—å–∫–æ –¥–≤–∞ –∞—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–∏—Ö –¥–µ–π—Å—Ç–≤–∏—è
            windowSum += nums[i] - nums[i - k];
            maxSum = Math.max(maxSum, windowSum);
        }

        return maxSum;
    }
}
